Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1085, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 551, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 846, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 748, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import sys
from vowpalwabbit import pyvw

# wow! your data can be ANY type you want... does NOT have to be VW examples
DET  = 1
NOUN = 2
VERB = 3
ADJ  = 4
my_dataset = [ [(DET , 'the'),
                (NOUN, 'monster'),
                (VERB, 'ate'),
                (DET , 'a'),
                (ADJ , 'big'),
                (NOUN, 'sandwich')],
               [(DET , 'the'),
                (NOUN, 'sandwich'),
                (VERB, 'was'),
                (ADJ , 'tasty')],
               [(NOUN, 'it'),
                (VERB, 'ate'),
                (NOUN, 'it'),
                (ADJ , 'all')] ]


class SequenceLabeler(pyvw.SearchTask):
    def __init__(self, vw, sch, num_actions):
        # you must must must initialize the parent class
        # this will automatically store self.sch <- sch, self.vw <- vw
        pyvw.SearchTask.__init__(self, vw, sch, num_actions)

        # set whatever options you want
        sch.set_options( sch.AUTO_HAMMING_LOSS | sch.AUTO_CONDITION_FEATURES | sch.IS_LDF )

    def makeExample(self, word, p):
        ex = self.example({'w': [word + '_' + str(p)]}, labelType=self.vw.lCostSensitive)
        ex.set_label_string(str(p) + ':0')
        return ex

    def _run(self, sentence):   # it's called _run to remind you that you shouldn't call it directly!
        output = []
        for n in range(len(sentence)):
            pos,word = sentence[n]
            # use "with...as..." to guarantee that the example is finished properly
            ex = [ self.makeExample(word,p) for p in [DET,NOUN,VERB,ADJ] ]
            pred = self.sch.predict(examples=ex, my_tag=n+1, oracle=pos, condition=(n,'p'))
            vw.finish_example(ex)
            output.append(pred)
        return output

# initialize VW as usual, but use 'hook' as the search_task
vw = pyvw.vw("--search 0 --csoaa_ldf m --quiet --search_task hook --ring_size 1024")

# tell VW to construct your search task object
sequenceLabeler = vw.init_search_task(SequenceLabeler)

# train it on the above dataset ten times; the my_dataset.__iter__ feeds into _run above
print('training!')
i = 0
while i < 10:
    sequenceLabeler.learn(my_dataset)
    i += 1

# now see the predictions on a test sentence
print('predicting!', file=sys.stderr)
print(sequenceLabeler.predict( [(1,w) for w in "the sandwich ate a monster".split()] ))
print('should have printed: [1, 2, 3, 1, 2]')

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
Input [0;32mIn [1][0m, in [0;36m<module>[0;34m[0m
[1;32m     48[0m         [38;5;28;01mreturn[39;00m output
[1;32m     50[0m [38;5;66;03m# initialize VW as usual, but use 'hook' as the search_task[39;00m
[0;32m---> 51[0m vw [38;5;241m=[39m [43mpyvw[49m[38;5;241;43m.[39;49m[43mvw[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43m--search 0 --csoaa_ldf m --quiet --search_task hook --ring_size 1024[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m     53[0m [38;5;66;03m# tell VW to construct your search task object[39;00m
[1;32m     54[0m sequenceLabeler [38;5;241m=[39m vw[38;5;241m.[39minit_search_task(SequenceLabeler)

File [0;32m/usr/local/lib/python3.9/site-packages/vowpalwabbit/pyvw.py:390[0m, in [0;36mvw.__init__[0;34m(self, arg_str, enable_logging, **kw)[0m
[1;32m    388[0m     [38;5;28msuper[39m(vw, [38;5;28mself[39m)[38;5;241m.[39m[38;5;21m__init__[39m([38;5;124m"[39m[38;5;124m [39m[38;5;124m"[39m[38;5;241m.[39mjoin(l), [38;5;28mself[39m[38;5;241m.[39m_log_wrapper)
[1;32m    389[0m [38;5;28;01melse[39;00m:
[0;32m--> 390[0m     [38;5;28;43msuper[39;49m[43m([49m[43mvw[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43m [39;49m[38;5;124;43m"[39;49m[38;5;241;43m.[39;49m[43mjoin[49m[43m([49m[43ml[49m[43m)[49m[43m)[49m
[1;32m    391[0m [38;5;28mself[39m[38;5;241m.[39minit [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[1;32m    393[0m [38;5;66;03m# check to see if native parser needs to run[39;00m

[0;31mRuntimeError[0m: Tried to use a multiline reduction as a singleline reduction. Name: shared_feature_merger
RuntimeError: Tried to use a multiline reduction as a singleline reduction. Name: shared_feature_merger

